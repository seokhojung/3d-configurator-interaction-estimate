{"version":3,"sources":["turbopack:///[project]/Desktop/3d-Configurator-interaction-estimate/src/app/templates/_components/TemplateList.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/Desktop/3d-Configurator-interaction-estimate/src/lib/storage/supabaseClient.ts","turbopack:///[project]/Desktop/3d-Configurator-interaction-estimate/src/app/templates/page.tsx","turbopack:///[project]/Desktop/3d-Configurator-interaction-estimate/src/lib/templates/service.ts","turbopack:///[project]/Desktop/3d-Configurator-interaction-estimate/src/lib/templates/validation.ts"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const TemplateList = registerClientReference(\n    function() { throw new Error(\"Attempted to call TemplateList() from the server but TemplateList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/Desktop/3d-Configurator-interaction-estimate/src/app/templates/_components/TemplateList.tsx\",\n    \"TemplateList\",\n);\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/Desktop/3d-Configurator-interaction-estimate/src/app/templates/_components/TemplateList.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/Desktop/3d-Configurator-interaction-estimate/src/app/templates/_components/TemplateList.tsx\",\n    \"default\",\n);\n","export const STORAGE_ERROR = { STORAGE_UNAVAILABLE: 'STORAGE_UNAVAILABLE' } as const;\n\ntype Ext = 'json' | 'yaml' | 'yml';\n\nconst memoryBucket = new Set<string>();\n\nfunction keyFromPath(path: string): { bucket: string; key: string } | null {\n  const m = /^supabase:\\/\\/([^\\/]+)\\/(.+)$/.exec(path);\n  if (!m) return null;\n  return { bucket: m[1], key: m[2] };\n}\n\nfunction useRealSdk(): boolean {\n  const url = process.env.SUPABASE_URL;\n  const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n  return Boolean(url && serviceKey && process.env.USE_SUPABASE_SDK === '1');\n}\n\nexport function existsStoragePath(\n  path: string\n): { ok: true; exists: boolean } | { ok: false; error: { code: string; message: string } } {\n  try {\n    const parsed = keyFromPath(path);\n    if (!parsed) return { ok: true, exists: false };\n\n    if (useRealSdk()) {\n      // Lazy dynamic import to avoid hard dependency when SDK is unavailable.\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { createClient } = require('@supabase/supabase-js');\n        const client = createClient(process.env.SUPABASE_URL as string, process.env.SUPABASE_SERVICE_ROLE_KEY as string);\n        // HEAD via list with prefix limited to exact key; reduce network when possible.\n        // Note: in this environment tests run without SDK; this branch is only used when explicitly enabled.\n        const bucket = client.storage.from(parsed.bucket);\n        const list = bucket.list(parsed.key.replace(/\\/[^/]+$/, ''), { search: parsed.key.split('/').pop() });\n        // Promise-like guard: if list is a promise, handle synchronously unsupported in this wrapper context.\n        if (typeof (list as any)?.then === 'function') {\n          // Not awaited to keep current sync signature; treat as unavailable for now.\n          return { ok: false, error: { code: STORAGE_ERROR.STORAGE_UNAVAILABLE, message: 'Async SDK path check not supported in sync context' } };\n        }\n      } catch (e: any) {\n        // Fallback to stub on missing SDK or runtime errors\n      }\n    }\n\n    const composite = `${parsed.bucket}/${parsed.key}`;\n    return { ok: true, exists: memoryBucket.has(composite) };\n  } catch (e: any) {\n    return { ok: false, error: { code: STORAGE_ERROR.STORAGE_UNAVAILABLE, message: e?.message || 'Storage unavailable' } };\n  }\n}\n\nexport function uploadTemplateContent(params: {\n  uid: string;\n  version: number;\n  ext: Ext;\n  content: string;\n  contentType: string;\n}): { ok: true; storage_path: string } | { ok: false; error: { code: string; message: string } } {\n  try {\n    const bucket = 'templates';\n    const key = `${params.uid}/template-${params.version}.${params.ext}`;\n\n    if (useRealSdk()) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { createClient } = require('@supabase/supabase-js');\n        const client = createClient(process.env.SUPABASE_URL as string, process.env.SUPABASE_SERVICE_ROLE_KEY as string);\n        const storage = client.storage.from(bucket);\n        const file = new Blob([params.content], { type: params.contentType || 'application/octet-stream' });\n        const uploadRes = storage.upload(key, file, { upsert: true });\n        if (typeof (uploadRes as any)?.then === 'function') {\n          // Cannot await in current sync interface; report temporary unavailability in this environment.\n          return { ok: false, error: { code: STORAGE_ERROR.STORAGE_UNAVAILABLE, message: 'Async SDK upload not supported in sync context' } };\n        }\n      } catch (e: any) {\n        // On any SDK error, map to STORAGE_UNAVAILABLE per contract\n        return { ok: false, error: { code: STORAGE_ERROR.STORAGE_UNAVAILABLE, message: e?.message || 'Storage unavailable' } };\n      }\n    }\n\n    const composite = `${bucket}/${key}`;\n    memoryBucket.add(composite);\n    const storage_path = `supabase://${bucket}/${key}`;\n    return { ok: true, storage_path };\n  } catch (e: any) {\n    return { ok: false, error: { code: STORAGE_ERROR.STORAGE_UNAVAILABLE, message: e?.message || 'Storage unavailable' } };\n  }\n}\n","import React from 'react';\nimport TemplateList from './_components/TemplateList';\nimport { listTemplates } from '../../lib/templates/service';\n\nexport default function TemplatesPage() {\n  const items = listTemplates().sort((a, b) => a.name.localeCompare(b.name));\n  return (\n    <main>\n      <h1>Templates</h1>\n      <TemplateList items={items} />\n    </main>\n  );\n}\n","import { randomUUID } from 'crypto';\nimport { CreateTemplateInput, TemplateMetadata } from './types';\nimport { ERROR } from './validation';\n// Avoid static import to prevent bundlers from resolving optional SDK deps in server components.\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nfunction checkStoragePath(path: string): { ok: true; exists: boolean } | { ok: false; error: { code: string; message: string } } {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const { existsStoragePath } = require('../storage/supabaseClient');\n    return existsStoragePath(String(path));\n  } catch {\n    // In environments without the storage client, assume path exists to keep UI/dev flow.\n    return { ok: true, exists: true };\n  }\n}\n\n// In-memory store as a placeholder until DB integration (Supabase) is added.\nconst STORE: Record<string, TemplateMetadata> = {};\n\nfunction nowISO(): string {\n  return new Date().toISOString();\n}\n\nexport function createTemplate(input: CreateTemplateInput, createdBy: string): { ok: true; id: string } | { ok: false; error: { code: string; message: string } } {\n  {\n    const chk = checkStoragePath(String(input.storage_path));\n    if (!chk.ok) return { ok: false, error: { code: ERROR.STORAGE_UNAVAILABLE, message: 'Storage unavailable' } };\n    if (!chk.exists) return { ok: false, error: { code: ERROR.STORAGE_PATH_INVALID, message: 'Invalid or unreachable storage_path' } };\n  }\n  const id = randomUUID();\n  const record: TemplateMetadata = {\n    id,\n    name: String(input.name),\n    type: input.type as any,\n    storage_path: String(input.storage_path),\n    version: input.version ?? 1,\n    created_by: createdBy,\n    created_at: nowISO(),\n  };\n  STORE[id] = record;\n  return { ok: true, id };\n}\n\nexport function listTemplates(): TemplateMetadata[] {\n  return Object.values(STORE);\n}\n\nexport function getTemplate(id: string): TemplateMetadata | null {\n  return STORE[id] ?? null;\n}\n\nexport function updateTemplate(\n  id: string,\n  input: CreateTemplateInput,\n  uid: string\n):\n  | { ok: true; record: TemplateMetadata }\n  | { ok: false; error: { code: string; message: string } } {\n  const existing = STORE[id];\n  if (!existing) return { ok: false, error: { code: ERROR.NOT_FOUND, message: 'Template not found' } };\n  if (existing.created_by !== uid) return { ok: false, error: { code: ERROR.FORBIDDEN, message: 'Forbidden' } };\n\n  {\n    const chk = checkStoragePath(String(input.storage_path));\n    if (!chk.ok) return { ok: false, error: { code: ERROR.STORAGE_UNAVAILABLE, message: 'Storage unavailable' } };\n    if (!chk.exists) return { ok: false, error: { code: ERROR.STORAGE_PATH_INVALID, message: 'Invalid or unreachable storage_path' } };\n  }\n\n  const updated: TemplateMetadata = {\n    id: existing.id,\n    name: String(input.name),\n    type: input.type as any,\n    storage_path: String(input.storage_path),\n    version: input.version ?? existing.version,\n    created_by: existing.created_by,\n    created_at: existing.created_at,\n  };\n  STORE[id] = updated;\n  return { ok: true, record: updated };\n}\n\nexport function deleteTemplate(\n  id: string,\n  uid: string\n): { ok: true } | { ok: false; error: { code: string; message: string } } {\n  const existing = STORE[id];\n  if (!existing) return { ok: false, error: { code: ERROR.NOT_FOUND, message: 'Template not found' } };\n  if (existing.created_by !== uid) return { ok: false, error: { code: ERROR.FORBIDDEN, message: 'Forbidden' } };\n  delete STORE[id];\n  return { ok: true };\n}\n","import { CreateTemplateInput, ErrorBody, TemplateType } from './types';\n\nexport const ERROR = {\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  STORAGE_PATH_INVALID: 'STORAGE_PATH_INVALID',\n  STORAGE_UNAVAILABLE: 'STORAGE_UNAVAILABLE',\n  UNAUTHORIZED: 'UNAUTHORIZED',\n  NOT_FOUND: 'NOT_FOUND',\n  FORBIDDEN: 'FORBIDDEN',\n} as const;\n\nexport function isTemplateType(v: unknown): v is TemplateType {\n  return v === 'basic' || v === 'advanced';\n}\n\nexport function validateCreateInput(body: CreateTemplateInput): ErrorBody | null {\n  if (!body || typeof body !== 'object') {\n    return { code: ERROR.VALIDATION_ERROR, message: 'Body must be an object' };\n  }\n  const { name, type, storage_path } = body;\n  if (!name || typeof name !== 'string') {\n    return { code: ERROR.VALIDATION_ERROR, message: 'name is required' };\n  }\n  if (!type || typeof type !== 'string' || !isTemplateType(type)) {\n    return { code: ERROR.VALIDATION_ERROR, message: 'type must be basic|advanced' };\n  }\n  if (!storage_path || typeof storage_path !== 'string') {\n    return { code: ERROR.VALIDATION_ERROR, message: 'storage_path is required' };\n  }\n  return null;\n}\n\n// Placeholder storage path existence check.\n// Accepts supabase schema-like pseudo URIs: supabase://templates/...\nexport function storagePathSeemsValid(path: string): boolean {\n  return /^supabase:\\/\\/templates\\/.+/.test(path);\n}\n\n// For PUT (full update) semantics we can reuse create validation\n// to require name/type/storage_path. Version remains optional.\nexport function validateUpdateInput(body: CreateTemplateInput): ErrorBody | null {\n  return validateCreateInput(body);\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}